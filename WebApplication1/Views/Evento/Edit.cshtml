@model WebApplication1.Models.Evento

@{
    ViewBag.Title = "Editar Evento";
}

<div class="container mt-4">
    <div class="card shadow-lg w-75 mx-auto">
        <div class="card-header bg-primary text-white text-center">
            <h2>Editar Evento</h2>
        </div>

        <div class="card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group row justify-content-center mb-3">
                    @Html.LabelFor(model => model.Local, htmlAttributes: new { @class = "col-md-3 col-form-label fw-bold text-md-end" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Local, new { htmlAttributes = new { @class = "form-control text-center" } })
                        @Html.ValidationMessageFor(model => model.Local, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- CEP -->
                <div class="form-group row justify-content-center mb-3">
                    @Html.LabelFor(model => model.cep, htmlAttributes: new { @class = "col-md-3 col-form-label fw-bold text-md-end" })
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.cep, new { @class = "form-control text-center", placeholder = "00000-000", @id = "cep", @name = "cep" })
                        @Html.ValidationMessageFor(model => model.cep, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Endereço -->
                <div class="form-group row justify-content-center mb-3">
                    @Html.LabelFor(model => model.endereço, htmlAttributes: new { @class = "col-md-3 col-form-label fw-bold text-md-end" })
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.endereço, new { @class = "form-control text-center", @id = "adress", @name = "adress" })
                        @Html.ValidationMessageFor(model => model.endereço, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Cidade -->
                <div class="form-group row justify-content-center mb-3">
                    @Html.LabelFor(model => model.cidade, htmlAttributes: new { @class = "col-md-3 col-form-label fw-bold text-md-end" })
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.cidade, new { @class = "form-control text-center", @id = "cidade", @name = "cidade" })
                        @Html.ValidationMessageFor(model => model.cidade, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Data -->
                <div class="form-group row justify-content-center mb-3">
                    <div class="col-md-3 col-form-label text-md-end fw-bold">
                        <p>Data do Evento</p>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.Data, "{0:yyyy-MM-dd}", new { @class = "form-control text-center", type = "date" })
                        @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="text-center mt-4">
                    <input type="submit" value="Salvar" class="btn btn-success px-4" />
                    <a href="@Url.Action("List", "Evento")" class="btn btn-secondary px-4 ms-3">Voltar</a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#cep').mask('00000-000', {
                translation: {
                    '0': { pattern: /[0-9]/ }
                },
            });
        });
        const cep = document.querySelector("#cep")
        const adress = document.querySelector("#adress")
        const cidade = document.querySelector("#cidade")

        cep.addEventListener('focusout', async () => {
            const response = await fetch(`https://viacep.com.br/ws/${cep.value}/json/`);
            if (!response.ok) {
                throw await response.json()
            }
            const responseCep = await response.json()

            adress.value = responseCep.logradouro
            cidade.value = responseCep.localidade
        })
    </script>
}
